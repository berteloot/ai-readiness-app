'use client';

import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';

interface PDFGeneratorProps {
  result: {
    score: number;
    tier: string;
    breakdown: Record<string, number>;
    maxScore: number;
  };
  aiReport: string;
  company: string;
}

export default function PDFGenerator({ result, aiReport, company }: PDFGeneratorProps) {
  const generatePDF = async () => {
    try {
      // Ensure breakdown exists and is valid
      const breakdown = result.breakdown || {};
      
      // Check if breakdown has any content
      const hasBreakdown = Object.keys(breakdown).length > 0;
      
      // Validate and sanitize data
      const score = result.score || 0;
      const tier = result.tier || 'Not Available';
      const maxScore = result.maxScore || 29;
      
      // Create a temporary div to render the content
      const element = document.createElement('div');
      element.innerHTML = `
        <div style="padding: 20px; font-family: Arial, sans-serif; max-width: 800px; line-height: 1.6;">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #2563eb; margin-bottom: 10px; font-size: 28px;">AI Readiness Assessment Report</h1>
            <h2 style="color: #374151; margin-bottom: 5px; font-size: 20px;">${company || 'Your Company'}</h2>
            <p style="color: #6b7280; font-size: 14px;">Generated on ${new Date().toLocaleDateString()}</p>
          </div>
          
          <div style="background: #f3f4f6; padding: 20px; border-radius: 10px; margin-bottom: 30px; text-align: center;">
            <div style="font-size: 48px; font-weight: bold; color: #2563eb; margin-bottom: 10px;">
              ${score}
            </div>
            <div style="font-size: 18px; color: #374151; margin-bottom: 10px;">
              out of ${maxScore} points
            </div>
            <div style="font-size: 24px; color: #059669; font-weight: bold;">
              ${tier}
            </div>
          </div>
          
          ${hasBreakdown ? `
            <div style="background: white; padding: 20px; border: 1px solid #e5e7eb; border-radius: 10px; margin-bottom: 30px;">
              <h3 style="color: #374151; margin-bottom: 15px; font-size: 18px;">Score Breakdown by Section</h3>
              ${Object.entries(breakdown).map(([key, score]) => `
                <div style="display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #f3f4f6;">
                  <span style="color: #374151;">${getSectionName(key)}</span>
                  <span style="font-weight: bold; color: #2563eb;">${score}/${getMaxScore(key)}</span>
                </div>
              `).join('')}
            </div>
          ` : ''}
          
          <div style="background: #f8fafc; padding: 20px; border-left: 4px solid #2563eb; margin-bottom: 30px;">
            <h3 style="color: #374151; margin-bottom: 15px; font-size: 18px;">AI-Generated Analysis & Recommendations</h3>
            <div style="white-space: pre-wrap; font-family: Arial, sans-serif; font-size: 12px; line-height: 1.5; color: #374151; max-width: 100%; word-wrap: break-word; overflow-wrap: break-word;">
              ${aiReport || 'No AI report available'}
            </div>
          </div>
          
          <div style="text-align: center; color: #6b7280; font-size: 14px; border-top: 1px solid #e5e7eb; padding-top: 20px;">
            <p>This report was generated by Lean Solutions Group</p>
            <p>For questions or support, please contact us</p>
          </div>
        </div>
      `;
      
      document.body.appendChild(element);
      
      // Convert to canvas with better quality settings
      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        width: 800,
        height: element.scrollHeight,
        scrollX: 0,
        scrollY: 0
      });
      
      // Remove temporary element
      document.body.removeChild(element);
      
      // Create PDF with better page handling
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 190; // Slightly smaller than page width for margins
      const pageHeight = 277; // A4 height minus margins
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      let heightLeft = imgHeight;
      let position = 0;
      
      // Add first page
      pdf.addImage(imgData, 'PNG', 10, 10, imgWidth, imgHeight);
      heightLeft -= (pageHeight - 20); // Account for margins
      
      // Add additional pages if needed
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 10, position + 10, imgWidth, imgHeight);
        heightLeft -= (pageHeight - 20);
      }
      
      // Download PDF
      pdf.save(`AI-Readiness-Report-${company}-${new Date().toISOString().split('T')[0]}.pdf`);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF. Please try again.');
    }
  };

  const getSectionName = (key: string): string => {
    const sectionNames: Record<string, string> = {
      s1: 'Technology Infrastructure',
      s2: 'Data Foundation',
      s3: 'Human Capital',
      s4: 'Strategic Planning',
      s5: 'Measurement & Analytics',
      s6: 'Risk Management',
      s7: 'Organizational Support'
    };
    return sectionNames[key] || key;
  };

  const getMaxScore = (key: string): number => {
    const maxScores: Record<string, number> = {
      s1: 8,
      s2: 4,
      s3: 4,
      s4: 4,
      s5: 5,
      s6: 6,
      s7: 4
    };
    return maxScores[key] || 0;
  };

  return (
    <button
      onClick={generatePDF}
      className="px-8 py-3 bg-gradient-to-r from-red-600 to-pink-600 text-white rounded-xl hover:from-red-700 hover:to-pink-700 transition-all duration-200 font-semibold text-lg shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 flex items-center space-x-2"
    >
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
      <span>Download PDF Report</span>
    </button>
  );
}
